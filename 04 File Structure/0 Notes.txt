ANGULAR PROJECT STRUCTURE — SUMMARY

Overview =======================>
- Generated by: ng new my-app.
- Workspace contains root configs and a single app by default; multi-project setups add projects/ entries in angular.json.

Tree =================>
my-app/
├─ angular.json
├─ package.json
├─ package-lock.json
├─ tsconfig.json
├─ tsconfig.app.json
├─ tsconfig.spec.json
├─ .editorconfig
├─ .gitignore
├─ src/
├─ .angular/
├─ .vscode/
└─ public/  (optional)

Key files =====================>
1) angular.json
- What: Angular CLI workspace + project config (build, serve, test, assets, outputs).
- Why: Controls how commands behave and how artifacts are produced; central for multi-project workspaces.
- Edit when: Adding assets/styles/scripts, changing output paths, adding projects or build options.

2) package.json
- What: Dependencies and npm scripts for the project.
- Why: Defines runtime/dev tooling and command shortcuts (start/build/test).
- Edit when: Installing/removing packages or adding scripts.

3) package-lock.json
- What: Auto-generated lockfile pinning exact dependency versions.
- Why: Ensures reproducible installs across machines/CI; do not edit manually.
- Edit when: Never; commit it to version control.

4) tsconfig.json
- What: Base TypeScript configuration for the workspace (compilerOptions, paths, strictness).
- Why: Shared TS behavior across app and tests; others extend it.
- Edit when: Enabling strict mode, setting path aliases, changing language targets.

5) tsconfig.app.json
- What: App-specific TS config for building src/app; extends tsconfig.json and excludes tests.
- Why: Keeps app compilation focused on production code.
- Edit when: App-only compiler tweaks are needed.

6) tsconfig.spec.json
- What: TS config for unit tests (*.spec.ts).
- Why: Isolates test compilation and typings from the app bundle.
- Edit when: Rare; adjust test typings or options if needed.

7) .gitignore
- What: Git ignore rules (node_modules, dist, caches).
- Why: Prevents committing generated or machine-specific files.
- Edit when: Add project-specific ignores.

8) .editorconfig
- What: Cross-editor formatting rules (indentation, line endings, charset).
- Why: Consistent formatting across editors/IDEs.
- Edit when: Rare; align team formatting defaults.

Key folders ==========>
1) src/
- What: Application source (index.html, main.ts, styles, app/, assets/).
- Why: Primary development area; CLI injects bundles into index.html automatically.
- Typical files: index.html, main.ts, styles.css, app/, assets/, environments/ (varies by setup).

2) .angular/
- What: CLI internal cache/metadata.
- Why: Speeds up builds; safe to delete if troubleshooting cache issues (it will be recreated).

3) .vscode/
- What: Workspace settings for VS Code (extensions, launch, tasks).
- Why: Helps standardize editor behavior across the team.

4) public/ (optional)
- What: Static files served directly without processing.
- Why: Good for robots.txt, favicon, or files that must bypass bundling; differs from src/assets (processed).

Practical tips ===========>
- Commit package-lock.json for deterministic installs and CI parity.
- Place app-referenced assets under src/assets; use public/ for pass-through static files.
- Keep most TypeScript options in tsconfig.json; override only where necessary in app/spec configs.
- Use angular.json to add global styles, extra assets, and file replacements tied to configurations.